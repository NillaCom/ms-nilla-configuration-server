# This workflow shows how to build a Docker image, tag and push it to DigitalOcean Container Registry, and
# deploy the application on a DigitalOcean Kubernetes cluster. For description to the entire workflow,
# see www.digitalocean.com/docs/kubernetes/how-to/deploy-using-github-actions.

name: ms-nilla-configuration-server

# Controls when the action will run.
on:
  push:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'deployment.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository.
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Java (Maven) environment.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'amazoncorretto'

      # Step 3: Cache Maven dependencies to speed up builds.
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the Spring Boot application with Maven.
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Step 5: Install doctl to interact with DigitalOcean.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Step 6: Log in to DigitalOcean Container Registry.
      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      # Step 7: Build the Docker image for deployment.
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_NAME }}/ms-nilla-configuration-server:$(echo $GITHUB_SHA | head -c7) .

      # Step 8: Push the image to DigitalOcean Container Registry.
      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/ms-nilla-configuration-server:$(echo $GITHUB_SHA | head -c7)

      # Step 9: Update deployment YAML with the new image tag.
      - name: Update deployment file
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/ms-nilla-configuration-server:${TAG}|' $GITHUB_WORKSPACE/deployment.yml

      # Step 10: Save Kubernetes kubeconfig with short-lived credentials.
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      # Step 11: Deploy to DigitalOcean Kubernetes.
      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/deployment.yml

      # Step 12: Verify deployment status.
      - name: Verify deployment
        run: kubectl rollout status deployment/ms-nilla-configuration-server -n nilla
